priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

	${4:/* public methods */}
private:
	${3:/* private methods */}

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/  \/\/ /m}namespace $1${1/.+//m}
endsnippet

snippet nsros "namespace for ROS.. (namespace)"
namespace ${1:`!p
if not snip.c:
        import os, rospkg

        file_path = os.getcwd()
        pkg_name = rospkg.get_package_name(file_path)
        pkg_path = rospkg.RosPack().get_path(pkg_name)

        metapkg_path = os.path.dirname(pkg_path)
        metapkg_name = os.path.basename(metapkg_path)

        snip.rv = metapkg_name
else:
        snip.rv = snip.c`}
{
namespace ${2:`!p
if not snip.c:
        import os, rospkg

        file_path = os.getcwd()
        pkg_name = rospkg.get_package_name(file_path)

        snip.rv = pkg_name
else:
        snip.rv = snip.c`}
{
	${VISUAL}${0}
}${2/.+/  \/\/ /m}namespace $2${2/.+//m}
}${1/.+/  \/\/ /m}namespace $1${1/.+//m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vec "std::vector (v)"
std::vector<${1:int}> v$0;
endsnippet

snippet str "std::string (str)"
std::string ${0};
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	${3}

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet
# vim:ft=snippets:
