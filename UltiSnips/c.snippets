###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:ii} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (int ii = 0; ii < ${1:count}; ++ii)
{
	${VISUAL}${0}
}
endsnippet

snippet forj "for int loop (forj)"
for (int jj = 0; jj < ${1:count}; ++jj)
{
	${VISUAL}${0}
}
endsnippet

snippet dfor "double for loop (dfor)"
for (int ${3:ii} = 0; $3 < ${1:rows}; ++$3)
{
	for (int ${4:jj} = 0; $4 < ${2:cols}; ++$4)
	{
		${VISUAL}${0}
	}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet hguard "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import os, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()

	folders_list = os.getcwd().split("/")
	header_guard_components = []

	for ii in range(len(folders_list) - 1, -1, -1):
	    if (ii > 1 and folders_list[ii - 1] == "include" and
		folders_list[ii] == folders_list[ii - 2]):

		header_guard_components.append(folders_list[ii - 2])
		break
	    else:
		header_guard_components.append(folders_list[ii])

	header_guard_name = ""
	for ii in range(len(header_guard_components) - 1, -1, -1):
	    header_guard_name += str(header_guard_components[ii]).upper() + "_"
	snip.rv = header_guard_name + name
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif  // $1
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do
{
	${VISUAL}${0}
}
while (${1:/* condition */});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet ife "if else .. (ifel)"
if (${2:/* condition */})
{
	${VISUAL}${0}
}
else
{
	${VISUAL}${1}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */})
{
	${VISUAL}${0}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

# vim:ft=snippets:
